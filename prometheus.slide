Prometheus instrumentation for go
Cambridge Gophers
28 Mar 2019

Ray Miller
Principal DevOps Engineer, Metail
ray@1729.org.uk
https://www.1729.org.uk/
@ray1729

* Talk outline

- Prometheus
- Data model
- client_golang
- Basic examples
- RED
- Instrumenting an http.Handler

* Prometheus

.link https://prometheus.io/

- Open Source monitoring tool
- Service discovery
- Metrics collection
- Time series database
- Rules engine for derived metrics and alerts

* Prometheus architecture

.image https://prometheus.io/assets/architecture.png 458 763

* Prometheus exporters

.link https://prometheus.io/docs/instrumenting/exporters/

A Prometheus exporter collects metrics from a system and exposes them
in a format that Prometheus can scrape. There are too many to list
here, but examples include:

- Node exporter for Linux
- WMI exporter for Windows
- Blackbox exporter
- PostgreSQL exporter
- Redis exporter
- Netgear router exporter
- Kafka exporter

* Data model

.link https://prometheus.io/docs/concepts/data_model/

Every time series is uniquely identified by its name and a set of labels

    http_requests_total{method="GET",path="/"}

* Metric types

.link https://prometheus.io/docs/concepts/metric_types/

- Counter
- Gauge
- Histogram
- Summary

* Exposition format

Prometheus uses a simple text-based exposition format

.code prometheus.examples/exposition.txt

* Prometheus go client

.link https://github.com/prometheus/client_golang

- Talking to the Prometheus HTTP API
- Instrumenting application code

* Exposing metrics from a go program

.code prometheus.examples/simple/main.go /START OMIT/,/END OMIT/

* Adding a custom metric

.code prometheus.examples/custom/main.go /PART1 OMIT/,/PART2 OMIT/

* Adding a custom metric (continued)

.code prometheus.examples/custom/main.go /PART2 OMIT/,/END OMIT/

* Automatic registration

.code prometheus.examples/auto/main.go /START OMIT/,/END OMIT/

* Adding labels

.code prometheus.examples/vec/main.go /START OMIT/,/END OMIT/

* A function that might fail

.code prometheus.examples/red/main.go /START FUNC OMIT/,/END FUNC OMIT/

* RED

- R = request rate (requests per second)
- E = request error rate (as a throughput metric or fraction of overall throughput)
- D = request duration (time taken for each request)

* Metrics

.code prometheus.examples/red/main.go /START METRICS OMIT/,/END METRICS OMIT/

* Wrapper func to record metrics

.code prometheus.examples/red/main.go /START WRAP OMIT/,/END WRAP OMIT/

* Recording rules

.code prometheus.examples/rules.yml

* HTTP middleware

HTTP middleware is simply a function that takes a `http.Handler` and
returns a new `http.Handler`, possibly with different behaviour.

    func exampleMiddleware(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            // Our middleware logic goes here...
            next.ServeHTTP(w, r)
        })
    }

It can be used, for example, to add authentication, logging, or
*instrumentation* to a `http.Handler`.

* promhttp

.link https://godoc.org/github.com/prometheus/client_golang/prometheus/promhttp

The `promhttp` package includes middleware for instrumenting HTTP
handlers:

- InstrumentHandlerCounter
- InstrumentHandlerDuration
- InstrumentHandlerInFlight
- InstrumentHandlerRequestSize
- InstrumentHandlerResponseSize
- InstrumentHandlerTimeToWriteHeader

* Instrumenting an http.Handler

.code prometheus.examples/handler/main.go /START METRICS OMIT/,/END METRICS OMIT/

* Instrumenting an http.Handler (continued)

.code prometheus.examples/handler/main.go /START HANDLERS OMIT/,/END HANDLERS OMIT/

* Instrumenting an http.Handler (continued)

.code prometheus.examples/handler/main.go /START ROUTES OMIT/,/END ROUTES OMIT/

* go-swagger

.link https://github.com/go-swagger/go-swagger

The generated server has an extension point for adding middleware:

.code prometheus.examples/swagger/restapi/configure_greeting_server.go /START OMIT/,/END OMIT/

There has been some discussion about how to add a metrics endpoint:

.link https://github.com/go-swagger/go-swagger/issues/1120
